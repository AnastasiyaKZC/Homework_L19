{"name": "test_ios_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: [BROWSERSTACK_INVALID_APP_URL] The app_url/ custom_id/ shareable_id specified in the 'app' capability in your test script is invalid. Please update the 'app' capability with a valid value and try again. Refer to this document to reset the app capabilities : https://www.browserstack.com/docs/app-automate/appium/set-up-tests/specify-app#BrowserStack_SDK", "trace": "request = <SubRequest 'ios_only' for <Function test_ios_search>>\n\n    @pytest.fixture\n    def ios_only(request):\n        \"\"\"\n        Fixture for iOS-only tests\n        \"\"\"\n        options = ios_mobile_config()\n    \n>       browser.config.driver = webdriver.Remote(\n            command_executor=config.browserstack_url,\n            options=options\n        )\n\ntests/conftest.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1203fc620>\nresponse = {'sessionId': '', 'status': 13, 'value': {'error': \"[BROWSERSTACK_INVALID_APP_URL] The app_url/ custom_id/ shareable_i...e app capabilities : https://www.browserstack.com/docs/app-automate/appium/set-up-tests/specify-app#BrowserStack_SDK\"}}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: [BROWSERSTACK_INVALID_APP_URL] The app_url/ custom_id/ shareable_id specified in the 'app' capability in your test script is invalid. Please update the 'app' capability with a valid value and try again. Refer to this document to reset the app capabilities : https://www.browserstack.com/docs/app-automate/appium/set-up-tests/specify-app#BrowserStack_SDK\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException"}, "start": 1745410080844, "stop": 1745410080844, "uuid": "9e6674a0-ef7e-499f-b7ce-afcb240f74db", "historyId": "cdfc7c195af7529271ab3a7850e10335", "testCaseId": "cdfc7c195af7529271ab3a7850e10335", "fullName": "tests.ios.test_wikipedia#test_ios_search", "labels": [{"name": "parentSuite", "value": "tests.ios"}, {"name": "suite", "value": "test_wikipedia"}, {"name": "host", "value": "MBP16-MAX.local"}, {"name": "thread", "value": "43998-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ios.test_wikipedia"}]}