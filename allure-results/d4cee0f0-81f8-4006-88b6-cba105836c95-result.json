{"name": "test_open_article", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10.0s, while waiting for:\nbrowser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title')).element_by(has text Python (programming language)).click\n\nReason: AssertionError: \n\tCannot find element by condition «has text Python (programming language)» \n\tAmong browser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title'))\nScreenshot: file:///Users/kuznetsova/.selene/screenshots/1745408406848/1745408406848.png\nPageSource: file:///Users/kuznetsova/.selene/screenshots/1745408406848/1745408406848.html", "trace": "fn = <selene.core.wait.Command object at 0x103087690>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\nvenv/lib/python3.13/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.13/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\nvenv/lib/python3.13/site-packages/selene/core/entity.py:525: in raw_click\n    element.locate().click()\nvenv/lib/python3.13/site-packages/selene/core/entity.py:185: in locate\n    return self._locator()\nvenv/lib/python3.13/site-packages/selene/core/locator.py:34: in __call__\n    return self._locate()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def find() -> WebElement:\n        cached = self.cached\n    \n        for element in cached:\n            if element.matching(condition):\n                return element()\n    \n        from selene.core import query\n    \n        if self.config.log_outer_html_on_failure:\n            \"\"\"\n            TODO: move it support.shared.config\n            \"\"\"\n            outer_htmls = [query.outer_html(element) for element in cached]\n    \n            raise AssertionError(\n                f'\\n\\tCannot find element by condition «{condition}» '\n                f'\\n\\tAmong {self}'\n                f'\\n\\tActual webelements collection:'\n                f'\\n\\t{outer_htmls}'\n            )  # TODO: isn't it better to print it all the time via hook, like for Element?\n        else:\n>           raise AssertionError(\n                f'\\n\\tCannot find element by condition «{condition}» '\n                f'\\n\\tAmong {self}'\n            )\nE           AssertionError: \nE           \tCannot find element by condition «has text Python (programming language)» \nE           \tAmong browser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title'))\n\nvenv/lib/python3.13/site-packages/selene/core/entity.py:911: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmake_screenshot = <function make_screenshot.<locals>._make_screenshot at 0x103027560>\n\n    def test_open_article(make_screenshot):\n        with step('Type search'):\n            browser.element((AppiumBy.ACCESSIBILITY_ID, \"Search Wikipedia\")).click()\n            make_screenshot(\"search_click\")\n    \n            search_input = browser.element((AppiumBy.ID, \"org.wikipedia.alpha:id/search_src_text\"))\n            search_input.type('Hello)')\n            make_screenshot(\"after_typing\")\n    \n        with step('Click on article'):\n            results = browser.all((AppiumBy.ID, 'org.wikipedia.alpha:id/page_list_item_title'))\n            results.should(have.size_greater_than(0))\n    \n            # Находим и кликаем на статью о Python\n            python_article = results.element_by(have.text('Python (programming language)'))\n            make_screenshot(\"before_click_article\")\n    \n>           python_article.click()\n\ntests/android_app/test_wikipedia.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.13/site-packages/selene/core/entity.py:540: in click\n    self.wait.for_(\nvenv/lib/python3.13/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x103087690>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 10.0s, while waiting for:\nE                   browser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title')).element_by(has text Python (programming language)).click\nE                   \nE                   Reason: AssertionError: \nE                   \tCannot find element by condition «has text Python (programming language)» \nE                   \tAmong browser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title'))\nE                   Screenshot: file:///Users/kuznetsova/.selene/screenshots/1745408406848/1745408406848.png\nE                   PageSource: file:///Users/kuznetsova/.selene/screenshots/1745408406848/1745408406848.html\n\nvenv/lib/python3.13/site-packages/selene/core/wait.py:148: TimeoutException"}, "steps": [{"name": "Type search", "status": "passed", "attachments": [{"name": "search_click", "source": "20f4e79f-d12c-4f47-9459-21f8692f9817-attachment.png", "type": "image/png"}, {"name": "after_typing", "source": "75f8a38e-c18d-4bc8-b83c-057c6c9f51d2-attachment.png", "type": "image/png"}], "start": 1745408469656, "stop": 1745408475788}, {"name": "Click on article", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10.0s, while waiting for:\nbrowser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title')).element_by(has text Python (programming language)).click\n\nReason: AssertionError: \n\tCannot find element by condition «has text Python (programming language)» \n\tAmong browser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title'))\nScreenshot: file:///Users/kuznetsova/.selene/screenshots/1745408406848/1745408406848.png\nPageSource: file:///Users/kuznetsova/.selene/screenshots/1745408406848/1745408406848.html\n\n", "trace": "  File \"/Users/kuznetsova/Cursor/Homework_L19/tests/android_app/test_wikipedia.py\", line 38, in test_open_article\n    python_article.click()\n    ~~~~~~~~~~~~~~~~~~~~^^\n  File \"/Users/kuznetsova/Cursor/Homework_L19/venv/lib/python3.13/site-packages/selene/core/entity.py\", line 540, in click\n    self.wait.for_(\n    ~~~~~~~~~~~~~~^\n        command.js.click(xoffset=xoffset, yoffset=yoffset)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<8 lines>...\n        )\n        ^\n    )\n    ^\n  File \"/Users/kuznetsova/Cursor/Homework_L19/venv/lib/python3.13/site-packages/selene/core/wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^\n  File \"/Users/kuznetsova/Cursor/Homework_L19/venv/lib/python3.13/site-packages/selene/core/wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "attachments": [{"name": "before_click_article", "source": "6e0005d7-dec6-44d8-ba7b-74afddab0b9c-attachment.png", "type": "image/png"}], "start": 1745408475788, "stop": 1745408495829}], "start": 1745408469655, "stop": 1745408495834, "uuid": "3918cff1-094e-42dc-9bb8-1474b0efbb21", "historyId": "f6211ada684d69c2c8925783fc5089a2", "testCaseId": "f6211ada684d69c2c8925783fc5089a2", "fullName": "tests.android_app.test_wikipedia#test_open_article", "labels": [{"name": "parentSuite", "value": "tests.android_app"}, {"name": "suite", "value": "test_wikipedia"}, {"name": "host", "value": "MBP16-MAX.local"}, {"name": "thread", "value": "38034-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.android_app.test_wikipedia"}]}